
#region Initialize variables

$AccountsCSVPath = "C:\Users\Administrator\Documents\Accounts.csv"
$ExportPath = "C:\Users\Administrator\Documents\Create-AllowedSafes_Output_" + (Get-Date -Format "MM-dd HHMM") + ".csv"
$PlatformSafe = @{}
$PlatformRegex = @{}
$header = "SafeName","PolicyID"


#endregion


#region Functions
Function Build-AllowedSafesStr{
    param (
        [Parameter(Mandatory = $true)]
        [String[]]
        $safeNames
    )

    # Defining the initial 
    Begin{
        $regexInit = "^("
        $regexTerm = ")$"
    }

    Process{
        [String]$allowedSafes = $regexInit
        ForEach($Safe in $safeNames){
            $allowedSafes = ($allowedSafes += ($Safe + "|"))
        }

        # removing trailing pipe and finalizing RegEx for return
        $allowedSafes = $allowedSafes.Substring(0,$allowedSafes.Length-1) + $regexTerm

        $allowedSafes
    }  
}

#endregion


#$i = 0
# Build hashtable of Platforms and all associated safes
Import-CSV -Path $AccountsCSVPath | %{
    $obj = $_
    $i += 1
    #if($i -gt 5000){break}
    if($PlatformSafe.ContainsKey($obj.SafeName)){
        If($PlatformSafe[$Obj.Safename] -Contains($obj.PolicyID) -eq $false){
            $PlatformSafe.($obj.safename) += $obj.PolicyID
        }
    }
    Else{
        $PlatformSafe.Add($Obj.SafeName,[System.Array]$obj.policyID)
    }
}

$PlatformSafe.Keys | %{ 
    Try{
        $PlatformRegex.Add($_,(Build-AllowedSafesStr $PlatformSafe.$_)) 
    }
    Catch{ 
        write-host ("error with RegexArrayAdd`n" + $_) 
    } 
}


# Export results to CSV File
Try{$PlatformRegex.GetEnumerator() | select name,value | ConvertTo-Csv | Out-File -FilePath $ExportPath}
catch{ write-host $_ }


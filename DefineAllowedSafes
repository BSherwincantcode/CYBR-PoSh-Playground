
#region Initialize variables

$AccountsCSVPath = "C:\Users\Administrator\Documents\Accounts.csv"
#$PlatformSafe = @{}
$PlatformRegex = @{}
$header = "SafeName","PolicyID"


#endregion


#region Functions
Function Get-Type($input){ write-host ("The Object " + $input + " has type of " + $input.GetType()) }

Function Build-AllowedSafes{
    param (
        [Parameter(Mandatory = $true)]
        [String[]]
        $safeNames
    )

    Begin{
        $regexBegin = "^("
        $regexTerm = ")$"
    }

    Process{
        
        $Safenames | %{write-host ($_ + "@@@@@")}

        $SafeNames
        [String]$allowedSafes = $regexBegin
        write-host ("first type allowedsafes " +$allowedSafes.GetType())
        ForEach($Safe in $safeNames){
            $allowedSafes = ($allowedSafes += ($Safe + "|"))
        }
        write-host $allowedsafes
        $allowedSafes = $allowedSafes.Substring(0,$allowedSafes.Length-1) + $regexTerm
        write-host ("allowedsafes after substring " + $allowedSafes )
        write-host ("second type allowedsafes " + $allowedSafes.GetType())
    }
    End{
        $allowedSafess
    }
    
}

#endregion


$i = 0<#
# Build hashtable of Platforms and all associated safes
Import-CSV -Path $AccountsCSVPath | %{
    $obj = $_
    $i += 1
    if($i -gt 1000){break}
    if($PlatformSafe.ContainsKey($obj.SafeName)){
        If($PlatformSafe[$Obj.Safename] -Contains($obj.PolicyID) -eq $false){
            try{$PlatformSafe.($obj.safename) += $obj.PolicyID}
            catch{ write-host ("Policy Add ERROR`n" + $_ )}
            }
    }
    Else{
        try{ $PlatformSafe.Add($Obj.SafeName,[System.Array]$obj.policyID) }
        catch{ write-host ("Error with adding new safe`n" + $_) }
    }
}#>

$PlatformSafe.Keys | %{ 
    Try{$PlatformRegex.Add($_,(Build-AllowedSafes -SafeNames $PlatformSafe.$_))}
    Catch{ write-host ("error with RegexArrayAdd`n" + $_) } 
    }

